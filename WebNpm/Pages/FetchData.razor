@page "/fetchdata"
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.ChartJS.BarChart.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage;


@if (ckksValue != null)
{
    <ChartJsPieChart @ref="_pieChartJs" Config="@config_ckks" Width="600" Height="300" />
}
else
{
    <h1 class="encrypt" style="margin-top:10%">Please run the <a href="/">CKKS Encryptio</a> to have chart here</h1>
}
<br />
<br />
@if (bfvValue != null)
{
    <ChartJsPieChart @ref="_pieChartJs" Config="@config_bfv" Width="600" Height="300" />
}
else
{
    <h1 class="encrypt">Please run the <a href="counter">BFV Encryption</a> to have chart here</h1>
}
<br/><br/>
@if (bfvValue != null && ckksValue != null) 
{ 
    <ChartJsBarChart @ref="_barChartJs" Config="@config_compare" Width="200" Height="50"/>
}


<br />
<br />

@code{
    private PieConfig config_ckks;
    private PieConfig config_bfv;
    private BarConfig config_compare;
    private ChartJsPieChart _pieChartJs;
    private ChartJsBarChart _barChartJs;
    public string[] bfvValue = new string[46];
    private string[] ckksValue = new string[46];
    private BarDataset<DoubleWrapper> _barDataSet;
    protected override void OnInitialized()
    {
        ckksValue = localStorage.GetItem<string[]>("avgBatchCkks");
        bfvValue = localStorage.GetItem<string[]>("avgBatch");

        config_ckks = new PieConfig
        {
            Options = new PieOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "CKKS chart",
                    FontSize = 30,
                    FontColor = "red",
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                }
            }
        };
        config_bfv = new PieConfig
        {
            Options = new PieOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "BFV chart",
                    FontSize = 30,
                    FontColor = "red"
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                }
            }
        };
        config_compare = new BarConfig
        {

            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Compare Chart",
                    FontSize = 30,
                    FontColor = "red"
                },
                Responsive = true,
                Animation = new Animation
                {
                    Duration = 20000,
                }
                
            }

        };

        config_ckks.Data.Labels.AddRange(new[] { "avgEncode", "avgDecode","avgEncrypt", "avgDecrypt", "avgAdd","avgMultiply","avgMultiplyPlain",
        "avgSquare","avgRelinearize","avgRescale","avgRotateOneStep","avgRotateRandom","avgConjugate","avgSumElements","avgDotProductPlain"});

        config_bfv.Data.Labels.AddRange(new[] { "avgEncode", "avgDecode","avgEncrypt", "avgDecrypt", "avgAdd","avgMultiply","avgMultiplyPlain",
        "avgSquare","avgRelinearize","avgRotateRowsOneStep","avgRotateRowsRandom","avgRotateColumns","avgSumElements","avgDotProduct","avgDotProductPlain"});

        config_compare.Data.Labels.AddRange(new[] { "ckksEncode","bfvEncode", "ckksDecode","bfvDecode","ckksEncrypt","bfvEncrypt", "ckksDecrypt","bfvDecrypt",
        "ckksAdd", "bfvAdd","ckksMultiply","bfvMultiply","ckksMultiplyPlain","bfvMultiplyPlain",
        "ckksSquare","bfvSquare","ckksRelinerize","bfvRelinearize","ckksRotateOneStep","bfvRptateOneStep","ckksSumElement","bfvSumElement" });

        var pieSet_ckks = new PieDataset
        {
            BackgroundColor = new[] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),ColorUtil.RandomColorString(), ColorUtil.RandomColorString()},
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };
        var pieSet_bfv = new PieDataset
        {
            BackgroundColor = new[] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),ColorUtil.RandomColorString(), ColorUtil.RandomColorString()},
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };
        _barDataSet = new BarDataset<DoubleWrapper>
        {
            BackgroundColor = new[] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(),ColorUtil.RandomColorString(),ColorUtil.RandomColorString(),ColorUtil.RandomColorString(),ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(),ColorUtil.RandomColorString(),ColorUtil.RandomColorString()},
            BorderWidth = 3,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "black",
        };
        if (ckksValue != null)
        {
            pieSet_ckks.Data.AddRange(new double[] {
            Double.Parse(ckksValue[0]),Double.Parse(ckksValue[1]),Double.Parse(ckksValue[2]),Double.Parse(ckksValue[3]),Double.Parse(ckksValue[4]),Double.Parse(ckksValue[5]),
            Double.Parse(ckksValue[6]),Double.Parse(ckksValue[7]),Double.Parse(ckksValue[8]),Double.Parse(ckksValue[9]),Double.Parse(ckksValue[10]),Double.Parse(ckksValue[11]),
            Double.Parse(ckksValue[12]),Double.Parse(ckksValue[13]),Double.Parse(ckksValue[14])
            });
        }

        if (bfvValue != null)
        {
            pieSet_bfv.Data.AddRange(new double[] {
            Double.Parse(bfvValue[0]),Double.Parse(bfvValue[1]),Double.Parse(bfvValue[2]),Double.Parse(bfvValue[3]),Double.Parse(bfvValue[4]),Double.Parse(bfvValue[5]),
            Double.Parse(bfvValue[6]),Double.Parse(bfvValue[7]),Double.Parse(bfvValue[8]),Double.Parse(bfvValue[9]),Double.Parse(bfvValue[10]),Double.Parse(bfvValue[11]),
            Double.Parse(bfvValue[12]),Double.Parse(bfvValue[13]),Double.Parse(bfvValue[14])
            });
        }

        if(bfvValue != null && ckksValue != null)
        {
            _barDataSet.AddRange(new double[] { Double.Parse(ckksValue[0])/1000, Double.Parse(bfvValue[0])/1000, Double.Parse(ckksValue[1])/1000, Double.Parse(bfvValue[1])/1000,
            Double.Parse(ckksValue[2])/1000,Double.Parse(bfvValue[2])/1000,Double.Parse(ckksValue[3])/1000,Double.Parse(bfvValue[3])/1000,
            Double.Parse(ckksValue[4])/1000,Double.Parse(bfvValue[4])/1000,Double.Parse(ckksValue[5])/1000,Double.Parse(bfvValue[5])/1000,Double.Parse(ckksValue[6])/1000,Double.Parse(bfvValue[6])/1000,
            Double.Parse(ckksValue[7])/1000,Double.Parse(bfvValue[7])/1000,Double.Parse(ckksValue[8])/1000,Double.Parse(bfvValue[8])/1000,Double.Parse(ckksValue[10])/1000, Double.Parse(bfvValue[9])/1000,
            Double.Parse(ckksValue[13])/1000,Double.Parse(bfvValue[12])/1000}.Wrap());

        }


        config_ckks.Data.Datasets.Add(pieSet_ckks);
        config_bfv.Data.Datasets.Add(pieSet_bfv);
        config_compare.Data.Datasets.Add(_barDataSet);
        config_compare.Options.Legend.Display = false;
    }

}
